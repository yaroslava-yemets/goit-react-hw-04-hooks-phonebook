{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","handleChange","evt","currentTarget","value","reset","preventDefault","className","s","form","label","htmlFor","input","type","id","pattern","title","required","onChange","button","Filter","inputId","labeltId","ContactList","contacts","onDeleteContact","list","map","item","onClick","App","state","filter","changeFilter","setState","addContact","foundNames","contact","toLocaleLowerCase","lowerName","includes","alert","deleteContact","contactId","prevState","getVisibleContacts","lowerCasedFilter","JSON","parse","localStorage","getItem","this","setItem","stringify","visibleContacts","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93fe5767.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};","import { useState } from 'react';\nimport shortid from 'shortid';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm ({ onSubmit }) {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const nameInputId = shortid.generate();\n    const numberInputId = shortid.generate();\n\n    const handleChange = (evt) => {\n        const { value, name } = evt.currentTarget;\n        if(name === 'name') {\n            setName(value);\n        } if (name === 'number') {\n            setNumber(value)\n        }\n    };\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        onSubmit(name, number);\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <label className={s.label} htmlFor={nameInputId}>Name</label>\n            <input\n                className={s.input}\n                value={name}\n                type=\"text\"\n                name=\"name\"\n                id={nameInputId}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                required\n                onChange={handleChange}\n            />\n\n            <label className={s.label} htmlFor={numberInputId}>Number</label>\n            <input\n                className={s.input} \n                value={number}\n                type=\"tel\"\n                name=\"number\"\n                id={numberInputId}\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                required\n                onChange={handleChange}\n            />\n                \n            <button\n            className={s.button}\n                 type=\"submit\"\n            >\n                Add contact\n            </button>\n        </form>\n    );\n};\n\nexport default ContactForm;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport s from './Filter.module.css';\n\nconst Filter = ({value, onChange}) => {\n    const inputId = shortid.generate();\n    const labeltId = shortid.generate();\n    return (\n    <>\n        <div className={s.form}>\n            <label htmlFor={labeltId} className={s.label}> Find contacts by name</label>\n            <input className={s.input} id={inputId} type=\"text\" value={value} onChange={onChange}/>\n        </div>\n    </>\n    )\n}    \n\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n};\n\nexport default Filter;","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({contacts, onDeleteContact}) => (\n    <ul className={s.list}>\n        {contacts.map(({ id, name, number }) => (\n            <li key={id} className={s.item}>\n                <span>{name}:</span>\n                <span>{number}</span>\n                <button type=\"button\" onClick={() => onDeleteContact(id)}>Delete</button>\n            </li>\n        ))}\n    </ul>\n);\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;","import React, {Component} from 'react';\nimport shortid from 'shortid';\nimport './App.css';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nclass App extends Component {\n  static propTypes = {};\n\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = JSON.parse(localStorage.getItem('contacts'));\n\n    if(contacts) {\n      this.setState({ contacts });\n    }\n  };\n\n  componentDidUpdate(prevState) {\n    if(this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  changeFilter = (evt) => {\n    this.setState({filter: evt.currentTarget.value});\n  };\n\n  addContact = (name, number) => {\n    const foundNames = this.state.contacts.map(contact => contact.name.toLocaleLowerCase());\n    const lowerName = name.toLocaleLowerCase();\n    if(foundNames.includes(lowerName)){\n     return alert(`${name} is already in contacts`);\n    }\n      const contact = {\n        id: shortid.generate(),\n        name,\n        number,\n      };\n  \n      this.setState(({contacts})=> ({\n        contacts: [contact, ...contacts],\n      }));\n  };\n\n  deleteContact = (contactId) => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId)\n    }));\n  };\n\n  getVisibleContacts = () => {\n    const {filter, contacts} = this.state;\n    const lowerCasedFilter = filter.toLocaleLowerCase();\n    return contacts.filter(contact => contact.name.toLocaleLowerCase().includes(lowerCasedFilter))\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div>\n        <h1 className=\"text\">Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} />\n        <h2 className=\"text\">Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList contacts={visibleContacts} onDeleteContact={this.deleteContact} />\n      </div>\n    )}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Filter_form__2qyBI\",\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\"};"],"sourceRoot":""}